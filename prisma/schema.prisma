generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Configuration {
  id               String          @id @default(uuid())
  width            Int
  height           Int
  croppedImageUrl  String?
  imageUrl         String?
  modelsPhoneId    String?
  materialsPhoneId String?
  finishesPhoneId  String?
  colorsPhoneId    String?
  ColorsPhone      ColorsPhone?    @relation(fields: [colorsPhoneId], references: [id])
  finish           FinishesPhone?  @relation(fields: [finishesPhoneId], references: [id])
  material         MaterialsPhone? @relation(fields: [materialsPhoneId], references: [id])
  model            ModelsPhone?    @relation(fields: [modelsPhoneId], references: [id])
  Order            Order[]
}

model ColorsPhone {
  id            String          @id @default(uuid())
  label         String
  value         String          @unique
  tw            String
  Configuration Configuration[]
}

model ModelsPhone {
  id            String          @id @default(uuid())
  label         String
  value         String          @unique
  Configuration Configuration[]
}

model FinishesPhone {
  id            String          @id @default(uuid())
  value         String          @unique
  label         String
  description   String?
  price         Float           @default(0)
  Configuration Configuration[]
}

model MaterialsPhone {
  id            String          @id @default(uuid())
  value         String          @unique
  label         String
  description   String?
  price         Float           @default(0)
  Configuration Configuration[]
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

model User {
  id    String  @id
  email String
  Order Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String        @id @default(uuid())
  configurationId String        @unique
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  isPaid          Boolean       @default(false)
  status          OrderStatus   @default(awaiting_shipment)

  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?
  transactionId     String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model ShippingAddress {
  id          String  @id @default(uuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(uuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}
